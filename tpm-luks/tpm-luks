#!/bin/bash
#
# package reqs: tpm-tools, trousers
#
# Author: Kent Yoder <shpedoikal@gmail.com>
#
#set -x

AWK=/bin/awk
CRYPTSETUP=/sbin/cryptsetup

TPM_DEVICE=/sys/class/misc/tpm0
if test $(uname -r | cut -d. -f1) -ge 3; then
	TPM_DEVICE=/sys/class/tpm/tpm0
fi

DEVICE=
TMPFS_MNT=/dev/shm
TMPFS_KEYFILE=
SCRIPT_RC=0
OWNERPASS=
KEY_SLOT=
RAND_SOURCE="/dev/urandom"

function wipe_file
{
	F_SIZE=$(stat -c %s ${1})
	dd if=/dev/zero of=${1} bs=1c count=$F_SIZE >/dev/null 2>&1
	rm -f ${1}
}

function tpm_enabled
{

	if [ ! -e $TPM_DEVICE/device/enabled ]; then
		echo "Your TPM device driver doesn't appear to be loaded. Please run"
		echo "\`modprobe tpm_tis\` to load the driver and re-run this script"
		exit_script 7
	fi

	if [ ! $TPM_DEVICE/device/enabled ]; then
		echo "Your TPM is not enabled in your BIOS. Please halt the machine and"
		echo "then cold boot into your BIOS to enable the TPM chip."
		exit_script 8
	fi

	return 0
}

function tpm_owned
{
	if [ $(cat $TPM_DEVICE/device/owned) -ne 1 ]; then
		echo "Your TPM is unowned, please take ownership:"
		#NOTE: We ONLY support the well-known secret for the SRK
		tpm_takeownership $OWNERPASS -z || exit_script 9
	fi

	return 0
}

function find_luks_device
{
	NUM_DEVS=$(blkid -t TYPE=crypto_LUKS|${AWK} -F: '{print $1}'|wc -l)

	if [ $NUM_DEVS -eq 0 ]; then
		echo "Couldn't find a LUKS device!"
		exit_script 10
	elif [ $NUM_DEVS -gt 1 ]; then
		echo "Found more than one LUKS device, specify a device with the -d option"
		exit_script 11
	fi

	DEVICE="$(blkid -t TYPE=crypto_LUKS|${AWK} -F: '{print $1}')"
	if [ $? -ne 0 ]; then
		echo "Couldn't find a LUKS device!"
		exit_script 12
	fi

	return 0
}

#
# device_get - Set DEVICE, or die trying
#
function device_get
{
	if [ ! -n "${DEVICE}" ]; then
		find_luks_device
	fi
}

#
# keyfile_generate - put bytes from $RAND_SOURCE into $TMPFS_KEYFILE.
#
function keyfile_generate
{
	TMPFS_KEYFILE=${TMPFS_MNT}/key
	
	# let's secure the keyfile to only our user (which is probably root)
	touch $TMPFS_KEYFILE
	chmod a-rwx $TMPFS_KEYFILE
	chmod u+rw $TMPFS_KEYFILE

	dd if=${RAND_SOURCE} of=${TMPFS_KEYFILE} bs=1c count=${KEYFILE_SIZE} \
		>/dev/null 2>&1 || exit_script 14
}

function seal_key
{
	KEY_IN=${1}
	SEALED_KEY=${2}
	tpm_sealdata ${SEAL_OPTS} -i ${KEY_IN} -o ${SEALED_KEY} -z
	wipe_file ${KEY_IN}
}


#
# luks_add_key
#
function luks_add_key
{

	if [ ! -n "${KEY_SLOT}" ]; then
		KEY_SLOT=$(cryptsetup luksDump ${DEVICE} | grep 'Key Slot [0-9]: DISABLED' | tail -1 | sed 's/^Key Slot: \([0-9]\):.*/\1/')
		
		if [ ! -n "${KEY_SLOT}" ]; then
			echo "ERROR: Could not find an empty key slot to use, please specify one with -s"
			exit_script 15
		fi
	fi

	echo "You will now be prompted to enter any valid LUKS passphrase in order to store"
	echo -e "the new secret in LUKS key slot ${KEY_SLOT}:\n"

	$CRYPTSETUP luksAddKey --key-slot ${KEY_SLOT} $DEVICE ${1}
	SCRIPT_RC=$?
}

function usage
{
	echo "usage ${0##*/}: [-c|-m] [options]"
	echo -e "  -c                create a new key, store and seal it in a keyfile, add it to a"
	echo -e	"                    LUKS keyslot"
	echo -e "  -m                migrate the current key and seal to a new set of PCRs"
	echo "options:"
	echo -e "  -k <keyfile>      use <keyfile> to store the key (default /boot/.key)"
	echo -e "  -l <size>         use <size> bytes for a new key (default is 32)"
	echo -e "  -s <keyslot>      use the specified LUKS key slot (view free slots with "
	echo -e	"                     'cryptsetup luksDump <device>')"
	echo -e "  -d <device>       use the specified LUKS device (view with "
	echo -e	"                     'blkid -t TYPE=crypto_LUKS')"
	echo -e	"  -f <permsfile>    use the specified PCRs and values for the sealing of the key file"
	echo -e "  -p <PCRnum>       use the value of the current PCR to seal the key file.  "
	echo -e "                     May be given more than once"
	echo -e	"  -q <file>         use the specified file for the key material source, default"
	echo -e "                     is /dev/urandom"
	echo -e	"  -y                use the well known secret (all zeroes) as the owner password."
	echo -e	"  -h                help"
}

function exit_script
{
	if test -n "$TCSD_PID"; then
		kill $TCSD_PID
	fi
	
	exit $1
}

#
# main()
#

# 32 bytes == 256-bit keyfile == AES-256
KEYFILE_SIZE=32

KEYFILE_NAME="/boot/.key"
ACTION="x"
SEAL_OPTS=""

while getopts "cml:s:d:f:p:q:yh" opt; do
	case $opt in
	c)
		[[ "${ACTION}" == "x" ]] && ACTION="create" || (usage && exit_script 255)
		;;
	m)
		[[ "${ACTION}" == "x" ]] && ACTION="migrate" || (usage && exit_script 255)
		;;
	k)
		KEYFILE_NAME="${OPTARG}"
		;;
	l)
		KEYFILE_SIZE=${OPTARG}
		;;
	s)
		KEY_SLOT=${OPTARG}
		;;
	d)
		DEVICE=${OPTARG}
		;;
	f)
		SEAL_OPTS="${SEAL_OPTS} -f ${OPTARG}"
		;;
	p)
		SEAL_OPTS="${SEAL_OPTS} -p ${OPTARG}"
		;;
	q)
		RAND_SOURCE=${OPTARG}
		;;
	y)
		OWNERPASS="-y"
		;;
	*)
		usage
		exit_script 255
		;;
	esac
done

if [ -z "$SEAL_OPTS" ]; then
	echo "ERROR: You must provide data sealing options; failure to do so will expose the keyfile, redering encryption useless"
	exit_script 20
fi

# Start tcsd
tcsd -f &
TCSD_PID=$!

# check to ensure that the foreground tcsd is running
if test $(ps -p $TCSD_PID >/dev/null) -ne 0; then
	echo "WARNING: tcsd is currently running.  Starting tcsd on boot may allow for an attack vector for a regular user to acquire administrative rights"
fi

# always check that TPM is enabled and owned
tpm_enabled
tpm_owned

if [ "${ACTION}" == "create" ]; then
	device_get
	keyfile_generate
	luks_add_key ${TMPFS_KEYFILE}
	seal_key ${TMPFS_KEYFILE} ${KEYFILE_NAME}
	wipe_file ${TMPFS_KEYFILE}

	echo "Using NV index ${NVINDEX} for device ${DEVICE}"
elif [ "${ACTION}" == "migrate" ]; then

	TMPFS_KEYFILE=${TMPFS_MNT}/key
	
	# let's secure the keyfile to only our user (which is probably root)
	touch $TMPFS_KEYFILE
	chmod a-rwx $TMPFS_KEYFILE
	chmod u+rw $TMPFS_KEYFILE
	
	tpm_unsealdata -i ${KEYFILE_NAME} -o ${TMPFS_KEYFILE} -z 2>/dev/null
	RC=$?
	if [ $RC -ne 0 ] ; then
		tpm_unsealdata -i ${KEYFILE_NAME}.old -o ${TMPFS_KEYFILE} -z 2>/dev/null
		RC=$?
		
		if [ $RC -ne 0 ] ; then
			echo "ERROR: Could not unseal current or older version of $KEYFILE_NAME"
			exit_script 16
		fi
	else
		cp ${KEYFILE_NAME} ${KEYFILE_NAME}.old
	fi

	seal_key ${TMPFS_KEYFILE} ${KEYFILE_NAME}
	wipe_file ${TMPFS_KEYFILE}
	
	echo "Successfully migrated ${KEYFILE_NAME}"
else
	usage
	exit_script 1
fi

exit_script $SCRIPT_RC
