#!/bin/bash -e
#
# package reqs: tpm-tools, trousers
#
# Author: Kent Yoder <key@linux.vnet.ibm.com>
#
AWK=/bin/awk
CRYPTSETUP=/sbin/cryptsetup
NV_INDEX_LIMIT=32
TPM_LUKS_NVRAM_SIZE=33

#set -x

DEVICE=
TMPFS_MNT=
TMPFS_KEYFILE=
SCRIPT_RC=0
OWNERPASS=
NVPASS=
KEY_SLOT=
RAND_SOURCE="/dev/urandom"

function prompt_for_new_nvpass
{
	if [ ! -n "${NVPASS}" ]; then
		read -s -p "Enter a new TPM NV area password: " NVPASS1
		echo
		read -s -p "Re-enter the new TPM NV area password: " NVPASS2
		echo

		if [ "${NVPASS1}" != "${NVPASS2}" ]; then
			echo "New passwords don't match!"
			exit 1
		fi

		NVPASS=${NVPASS1}
	fi
}

function get_nv_password
{
	if [ ! -n "${NVPASS}" ]; then
		read -s -p "Enter your current TPM NVRAM password: " NVPASS || exit 2
		echo
	fi
}

function get_owner_password
{
	if [ ! -n "${OWNERPASS}" ]; then
		read -s -p "Enter your TPM owner password: " OWNERPASS || exit 3
		echo
	fi
}

# XXX
#function exit_hook
#{
#	umount $TMPFS_MNT
#}

function wipe_file
{
	dd if=/dev/zero of=${1} bs=1 count=33 >/dev/null 2>&1
	rm -f ${1}
}

function create_tmpfs_mount
{
	#test -n "$TMPFS_MNT" && echo "BUG IN SCRIPT MULTIPLE TEMP MOUNTS" && exit 4

	#TMPFS_MNT=$(mktemp -q -d /tmp/${0##*/}-XXXXXX)
	#if [ -n "$TMPFS_MNT" ]; then
	#	mount -t tmpfs -o size=16K tmpfs ${TMPFS_MNT}
	#
	#	if [ $? -eq 0 ]; then
	#		if [ ${1} -eq 1 ]; then
	#			trap exit_hook EXIT
	#		fi
	#	else
	#		# let the output from mount tell the user what happened
	#		exit 5
	#	fi
	#else
	#	echo "Failed to create temp mount point for tmpfs"
	#	exit 6
	#fi
	TMPFS_MNT="/dev/shm"
}

function tpm_enabled
{
	if [ ! -e /sys/class/misc/tpm0/device/enabled ]; then
		echo "Your TPM device driver doesn't appear to be loaded. Please run"
		echo "\`modprobe tpm_tis\` to load the driver and re-run this script"
		exit 7
	fi

	if [ ! /sys/class/misc/tpm0/device/enabled ]; then
		echo "Your TPM is not enabled in your BIOS. Please halt the machine and"
		echo "then cold boot into your BIOS to enable the TPM chip."
		exit 8
	fi

	return 0
}

function tpm_owned
{
	if [ $(cat /sys/class/misc/tpm0/device/owned) -ne 1 ]; then
		echo "Your TPM is unowned, please take ownership:"
		tpm_takeownership || exit 9
	fi

	return 0
}

#
# find_luks_nv_indexes - list defined NVRAM indexes that match the size we're
#                        looking for
#
function find_luks_nv_indexes
{
	NV_SIZES=( $(tpm_nvinfo | ${AWK} '$1 ~ /Size/ { print $3 }') )
	NV_INDEXES=( $(tpm_nvinfo | ${AWK} '$1$2 ~ /NVRAMindex/ { print $4 }') )
	NUM_INDEXES=$(( ${#NV_INDEXES[@]} - 1 ))

	for i in $(seq 0 ${NUM_INDEXES}); do
		#echo "DBG: ${NV_SIZES[$i]}"
		#echo "DBG: ${NV_INDEXES[$i]}"

		if [ ${NV_SIZES[$i]} -eq ${TPM_LUKS_NVRAM_SIZE} ]; then
			echo -n "${NV_INDEXES[$i]} "
		fi
	done
}

function find_free_nv_index
{
	# start at index 1, making the default first index to use 2. In,
	# testing the Atmel TPM threw errors if NV index 1 was used
	NV_INDEX=1
	NV_INDEXES=$(tpm_nvinfo | ${AWK} '$1$2 ~ /NVRAMindex/ { print $4 }')

	for i in ${NV_INDEXES}; do
		if [ $(( $i )) -gt ${NV_INDEX_LIMIT} ]; then
			continue
		fi

		if [ $(( $i )) -gt $(( ${NV_INDEX} )) ]; then
			NV_INDEX=$i
		fi
	done

	echo "$(( $NV_INDEX + 1 ))"
}

function find_luks_device
{
	NUM_DEVS=$(blkid -t TYPE=crypto_LUKS|${AWK} -F: '{print $1}'|wc -l)

	if [ $NUM_DEVS -eq 0 ]; then
		echo "Couldn't find a LUKS mount!"
		exit 10
	elif [ $NUM_DEVS -gt 1 ]; then
		echo "Found more than one LUKS mount, use -d option"
		exit 11
	fi

	DEVICE="$(blkid -t TYPE=crypto_LUKS|${AWK} -F: '{print $1}')"
	if [ $? -ne 0 ]; then
		DEVICE=
		exit 12
	fi

	return 0
}

function device_get
{
	if [ ! -n "${DEVICE}" ]; then
		find_luks_device
	fi
}

#
# keyfile_generate - create a tmpfs mount and write a key with version info
#		     into a file named "key" on that mount
#
function keyfile_generate
{
	create_tmpfs_mount 1

	TMPFS_KEYFILE=${TMPFS_MNT}/key

	# write the version bytes (version 0)
	dd if=/dev/zero of=${TMPFS_KEYFILE} bs=1c count=1 >/dev/null 2>&1 \
		|| exit 13

	# write a 32 byte symmetric key
	dd if=${RAND_SOURCE} of=${TMPFS_KEYFILE} bs=1c seek=1 count=32 \
		>/dev/null 2>&1 || exit 14
}

function nv_define_and_write
{
	PERMSFILE=${1}
	DATAFILE=${TMPFS_KEYFILE}

	get_owner_password

	if [ ! -n "${NVINDEX}" ]; then
		NVINDEX=$(find_free_nv_index)
	fi

	if [ -n "${PERMSFILE}" ]; then
		tpm_nvdefine -i ${NVINDEX} -s 33 -p 'AUTHREAD|AUTHWRITE' -o ${OWNERPASS} \
			-a ${NVPASS} -f ${PERMSFILE} >/dev/null
	else
		tpm_nvdefine -i ${NVINDEX} -s 33 -p 'AUTHREAD|AUTHWRITE' -o ${OWNERPASS} \
			-a ${NVPASS} >/dev/null
	fi

	if [ $? -ne 0 ]; then
		return 15
	fi

	tpm_nvwrite -i ${NVINDEX} -s 33 -f ${DATAFILE} --password=${NVPASS}
	if [ $? -ne 0 ]; then
		tpm_nvrelease -i ${NVINDEX} --pwdo=${OWNERPASS}
		return 16
	fi

	return 0
}

#
# luks_add_key
#
function luks_add_key
{
	KEYFILE=${1}
	KEY_SLOT=0

	SLOTID=0
	for S in $(cryptsetup luksDump ${DEVICE} | ${AWK} '$1$2 ~ /KeySlot/ {print $4}'); do
		if [ "${S}" == "DISABLED" ]; then
			KEY_SLOT=${SLOTID}
			break
		fi
		SLOTID=$(( ${SLOTID} + 1 ))
	done

	echo "You will now be prompted to enter any valid LUKS passphrase in order to store"
	echo -e "the new TPM NVRAM secret in LUKS key slot ${KEY_SLOT}:\n"

	$CRYPTSETUP luksAddKey --key-slot ${KEY_SLOT} $DEVICE ${KEYFILE}
	SCRIPT_RC=$?
}

#
# nv_get - read out a TPM NVRAM area onto a tmpfs mount
#
# exits on failure
#
function nv_get
{
	get_nv_password

	if [ ! -n "$NVINDEX" ]; then
		NV_INDEXES=( $(find_luks_nv_indexes) )
	else
		NV_INDEXES=( $NVINDEX )
	fi

	if [ ${#NV_INDEXES} -eq 0 ]; then
		echo "Found 0 NVRAM indexes readable by this script"
		exit 17
	fi

	create_tmpfs_mount 0

	TMPFS_KEYFILE="${TMPFS_MNT}/data.tmp"
	for i in ${NV_INDEXES[*]}; do
		tpm_nvread -i $i -s 33 --password=${NVPASS} -f ${TMPFS_KEYFILE} \
			>/dev/null 2>&1 || continue

		# version check
		od -A n -N 1 -t x1 ${TMPFS_KEYFILE} | grep -q 00 || continue
		return
	done

	dd if=/dev/zero of=${TMPFS_KEYFILE} bs=1c count=33 >/dev/null 2>&1
	#umount ${TMPFS_MNT}
	echo "Couldn't read any indexes from TPM NVRAM"
	exit 18
}

function luks_open
{
	NAME=${1}
	#TMPFS_MNT=${TMPFS_KEYFILE%/*}

	# copy out all but the version byte to a new file
	dd if=${TMPFS_KEYFILE} of=${TMPFS_MNT}/data bs=1c skip=1 count=32 >/dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo "dd failed! exiting..."
		wipe_file ${TMPFS_MNT}/data
		SCRIPT_RC=19
		return
	fi

	$CRYPTSETUP luksOpen ${DEVICE} ${NAME} --key-file ${TMPFS_MNT}/data --keyfile-size 32
	SCRIPT_RC=$?

	wipe_file ${TMPFS_MNT}/data
}

#
# luks_kill - call cryptsetup luksKillSlot
#
# @TMPFS_KEYFILE - the NVRAM data to extract the key from
# @DEVICE - the LUKS device
# @KEY_SLOT - the slot to kill
#
function luks_kill
{
	TMPFS_MNT=${TMPFS_KEYFILE%/*}
	TMPFS_KEY=${TMPFS_MNT}/key

	dd if=${TMPFS_KEYFILE} of=${TMPFS_KEY} bs=1c skip=1 count=32 >/dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo "dd failed! exiting..."
		wipe_file ${TMPFS_KEY}
		SCRIPT_RC=20
		return
	fi

	$CRYPTSETUP luksKillSlot ${DEVICE} ${KEY_SLOT} --key-file ${TMPFS_KEY} --keyfile-size 32
	SCRIPT_RC=$?
	wipe_file ${TMPFS_KEY}
}

function usage
{
	echo "usage ${0##*/}: [-c|-o|-m|-r|-w|-k] [options]"
	echo -e "  -c                create a new key, store it in TPM NVRAM and add it to a"
	echo -e	"                     LUKS keyslot"
	echo -e "  -o <name>         get a secret from TPM NVRAM and use it to open a LUKS device"
	echo -e "  -m                migrate NVRAM data to a new NVRAM area"
	echo -e "  -r                retrieve NVRAM data and write to a tmpfs file"
	echo -e "  -w <file>         write file to NVRAM"
	echo -e "  -k                kill a LUKS key slot using a key file read from NVRAM"
	echo
	echo "options:"
	echo -e "  -s <keyslot>      use the specified LUKS key slot (view free slots with "
	echo -e	"                     'cryptsetup luksDump <device>')"
	echo -e "  -i <index>        use the specified TPM NVRAM index for the new area (view "
	echo -e	"                     indexes with tpm_nvinfo)"
	echo -e "  -d <device>       use the specified LUKS device (view with "
	echo -e	"                     'blkid -t TYPE=crypto_LUKS')"
	echo -e	"  -p <nvpermsfile>  use the specified NV permissions file for the new area"
	echo -e	"  -q <file>         use the specified file for the key material source, default"
	echo -e "                     is /dev/urandom"
	echo -e	"  -h                help"
}

#
# main()
#
#UIDCHECK=1
NVINDEX=
ACTION="x"

while getopts "kco:mrw:s:i:d:p:q:h" opt; do
	case $opt in
	k)
		[[ "${ACTION}" == "x" ]] && ACTION="kill" || (usage && exit 255)
		;;
	c)
		[[ "${ACTION}" == "x" ]] && ACTION="create" || (usage && exit 255)
		;;
	o)
		[[ "${ACTION}" == "x" ]] && ACTION="open" || (usage && exit 255)
		NAME=${OPTARG}
		;;
	m)
		[[ "${ACTION}" == "x" ]] && ACTION="migrate" || (usage && exit 255)
		;;
	r)
		[[ "${ACTION}" == "x" ]] && ACTION="retrieve" || (usage && exit 255)
		;;
	w)
		[[ "${ACTION}" == "x" ]] && ACTION="write" || (usage && exit 255)
		#UIDCHECK=0
		TMPFS_KEYFILE=${OPTARG}
		;;
	s)
		KEY_SLOT=${OPTARG}
		;;
	i)
		NVINDEX=${OPTARG}
		;;
	d)
		DEVICE=${OPTARG}
		;;
	p)
		PERMSFILE=${OPTARG}

		if [ -n "${PERMSFILE}" -a ! -e "${PERMSFILE}" ]; then
			echo "Error: couldn't open ${PERMSFILE} for reading."
			exit 21
		fi
		;;
	q)
		RAND_SOURCE=${OPTARG}
		;;
	*)
		usage
		exit 255
		;;
	esac
done


#if [ ${UIDCHECK} -a $(id -u) -ne 0 ]; then
#	echo "You'll need to be root for this (uses tmpfs mount)"
#	exit 22
#fi

# always check that TPM is enabled and owned
tpm_enabled
tpm_owned

if [ "${ACTION}" == "create" ]; then
	device_get
	prompt_for_new_nvpass
	keyfile_generate

	nv_define_and_write ${PERMSFILE}
	RC=$?
	if [ $RC -ne 0 ]; then
		exit $RC
	fi

	# copy out all but the version byte
	dd if=${TMPFS_KEYFILE} of=${TMPFS_KEYFILE}.data bs=1c skip=1 count=32 \
		>/dev/null 2>&1

	wipe_file ${TMPFS_KEYFILE}
	luks_add_key ${TMPFS_KEYFILE}.data
	wipe_file ${TMPFS_KEYFILE}.data

	echo "Using NV index ${NVINDEX} for device ${DEVICE}"
elif [ "${ACTION}" == "open" ]; then
	device_get
	nv_get
	luks_open ${NAME}
	wipe_file ${TMPFS_KEYFILE}
	#exit_hook
elif [ "${ACTION}" == "migrate" ]; then
	nv_get
	NVINDEX=""
	nv_define_and_write ${PERMSFILE}

	wipe_file ${TMPFS_KEYFILE}
	#exit_hook
elif [ "${ACTION}" == "retrieve" ]; then
	nv_get
	echo ${TMPFS_KEYFILE}
elif [ "${ACTION}" == "write" ]; then
	prompt_for_new_nvpass
	nv_define_and_write ${PERMSFILE}
elif [ "${ACTION}" == "kill" ]; then
	if [ ! -n "${KEY_SLOT}" ]; then
		echo "Kill requires the -s option to specify a LUKS key slot"
		exit 255
	fi

	device_get
	nv_get
	luks_kill
	wipe_file ${TMPFS_KEYFILE}
	#exit_hook
else
	usage
	exit 1
fi

exit $SCRIPT_RC
