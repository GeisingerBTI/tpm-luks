#!/bin/bash
#
# package reqs: tpm-tools, trousers
#
# Author: Kent Yoder <yoder1@us.ibm.com>
#
CRYPTSETUP=/sbin/cryptsetup
NV_INDEX_LIMIT=16
TPM_LUKS_NVRAM_SIZE=33

set -e
#set -x

TEMP_MNT=
SCRIPT_RC=0
OWNERPASS=
NVPASS=

function get_nv_password
{
	if [ ! -n "${NVPASS}" ]; then
		read -s -p "Enter your current TPM NVRAM password: " NVPASS || exit -1
		echo
	fi
}

function get_owner_password
{
	if [ ! -n "${OWNERPASS}" ]; then
		read -s -p "Enter your TPM owner password: " OWNERPASS || exit -1
		echo
	fi
}

function exit_hook
{
	umount $TEMP_MNT
}

function wipe_file
{
	dd if=/dev/zero of=${1} bs=1 count=33 >/dev/null 2>&1
	rm -f ${1}
}

function create_tmpfs_mount
{
	test -n "$TEMP_MNT" && echo "BUG IN SCRIPT MULTIPLE TEMP MOUNTS" && exit -1

	TEMP_MNT=$(mktemp -q -d /tmp/${0##*/}-XXXXXX)
	if [ -n "$TEMP_MNT" ]; then
		mount -t tmpfs -o size=16K tmpfs ${TEMP_MNT}

		if [ $? -eq 0 ]; then
			trap exit_hook EXIT
		else
			# let the output from mount tell the user what happened
			exit -1
		fi
	else
		echo "Failed to create temp mount point for tmpfs"
		exit -1
	fi

	echo "$TEMP_MNT"
}

function tpm_enabled
{
	if [ ! -e /sys/class/misc/tpm0/device/enabled ]; then
		echo "Your TPM device driver doesn't appear to be loaded. Please run"
		echo "\`modprobe tpm_tis\` to load the driver and re-run this script"
		exit -1
	fi

	if [ ! /sys/class/misc/tpm0/device/enabled ]; then
		echo "Your TPM is not enabled in your BIOS. Please halt the machine and"
		echo "then cold boot into your BIOS to enable the TPM chip."
		exit -1
	fi

	return 0
}

function tpm_owned
{
	if [ ! /sys/class/misc/tpm0/device/owned ]; then
		echo "Your TPM is unowned, please take ownership:\n"
		tpm_takeownership || exit -1
	fi

	return 0
}

#
# find_luks_nv_indexes - list defined NVRAM indexes that match the size we're
#                        looking for
#
function find_luks_nv_indexes
{
	NV_SIZES=( $(tpm_nvinfo | awk '$1 ~ /Size/ { print $3 }') )
	NV_INDEXES=( $(tpm_nvinfo | awk '$1$2 ~ /NVRAMindex/ { print $4 }') )
	NUM_INDEXES=$(( ${#NV_INDEXES} - 1 ))

	for i in $(seq 0 ${NUM_INDEXES}); do
		#echo "DBG: ${NV_SIZES[$i]}"
		#echo "DBG: ${NV_INDEXES[$i]}"

		if [ ${NV_SIZES[$i]} -eq ${TPM_LUKS_NVRAM_SIZE} ]; then
			echo -n "${NV_INDEXES[$i]} "
		fi
	done
}


function find_free_nv_index
{
	NV_INDEXES=$(tpm_nvinfo | awk '$1$2 ~ /NVRAMindex/ { print $4 }')

	for i in ${NV_INDEXES}; do
		if [ $i -gt ${NV_INDEX_LIMIT} ]; then
			continue
		fi

		NV_INDEX=$i
	done

	echo "$(( $NV_INDEX + 1 ))"
}

function find_luks_device
{
	NUM_DEVS=$(blkid -t TYPE=crypto_LUKS|awk -F: '{print $1}'|wc -l)

	if [ $NUM_DEVS -eq 0 ]; then
		echo "Couldn't find a LUKS mount!"
		exit -1
	elif [ $NUM_DEVS -gt 1 ]; then
		echo "Found more than one LUKS mount, use -d option"
		exit -1
	fi

	echo "$(blkid -t TYPE=crypto_LUKS|awk -F: '{print $1}')"
}

#
# keyfile_generate - create a tmpfs mount and write a key with version info
#		     into a file named "key" on that mount
#
function keyfile_generate
{
	TMPFS_MNT=$(create_tmpfs_mount)

	# write the version bytes (version 0)
	test $? -eq 0 && \
		dd if=/dev/zero of=${TMPFS_MNT}/key bs=1c count=1 >/dev/null 2>&1

	# write a 32 byte symmetric key
	test $? -eq 0 && \
		dd if=/dev/urandom of=${TMPFS_MNT}/key bs=1c seek=1 count=32 >/dev/null 2>&1

	test $? -eq 0 && \
		echo "${TMPFS_MNT}/key"

	return $?
}

function nv_define_and_write
{
	OWNERPASS=${1}
	NVPASS=${2}
	DATAFILE=${3}
	NVINDEX=${4}
	PERMSFILE=${5}

	if [ -n "${PERMSFILE}" ]; then
		tpm_nvdefine -i ${NVINDEX} -s 33 -p 'AUTHREAD|AUTHWRITE' -o ${OWNERPASS} \
			-a ${NVPASS} -f ${PERMSFILE}
	else
		tpm_nvdefine -i ${NVINDEX} -s 33 -p 'AUTHREAD|AUTHWRITE' -o ${OWNERPASS} \
			-a ${NVPASS}
	fi

	test $? -ne 0 && \
		exit -1

	tpm_nvwrite -i ${NVINDEX} -s 33 -f ${DATAFILE} --password=${NVPASS}
	if [ $? -ne 0 ]; then
		tpm_nvrelease -i ${NVINDEX} --pwdo=${OWNERPASS}
		exit -1
	fi
}

#
# luks_add_key
#
function luks_add_key
{
	TMPFS_KEYFILE=${1}
	DEVICE=${2}
	KEY_SLOT=0

	SLOTID=0
	for S in $(cryptsetup luksDump ${DEVICE} | awk '$1$2 ~ /KeySlot/ {print $4}'); do
		if [ "${S}" == "DISABLED" ]; then
			KEY_SLOT=${SLOTID}
			break
		fi
		SLOTID=$(( ${SLOTID} + 1 ))
	done

	echo "You will now be prompted to enter any valid LUKS passphrase in order to store"
	echo "the new TPM NVRAM secret in LUKS key slot ${KEY_SLOT}:\n"

	$CRYPTSETUP luksAddKey --key-slot ${KEY_SLOT} $DEVICE ${TMPFS_KEYFILE}.data
	SCRIPT_RC=$?
}

#
# nv_get
#
function nv_get
{
	NVPASS=${1}
	NV_INDEXES=( $(find_luks_nv_indexes) )

	if [ ${#NV_INDEXES} -eq 0 ]; then
		echo "Found 0 NVRAM indexes readable by this script"
		exit -1
	fi

	TMPFS_MNT=$(create_tmpfs_mount)
	test $? -ne 0 && \
		exit -1

	for i in ${NV_INDEXES[*]}; do
		tpm_nvread -i $i -s 33 --password=${NVPASS} -f ${TMPFS_MNT}/data.tmp \
			>/dev/null 2>&1

		test $? -ne 0 &&
			continue

		# version check
		od -A n -N 1 -t x1 ${TMPFS_MNT}/data.tmp | grep -q 00

		test $? -ne 0 && \
			continue

		break
	done

	echo "${TMPFS_MNT}/data.tmp"
}

function luks_open
{
	TMPFS_FILE=${1}
	DEVICE=${2}
	NAME=${3}
	TMPFS_MNT=${1%/*}

	# copy out all but the version byte to a new file
	dd if=${TMPFS_FILE} of=${TMPFS_MNT}/data bs=1c skip=1 count=32 >/dev/null 2>&1

	$CRYPTSETUP luksOpen ${DEVICE} ${NAME} --key-file ${TMPFS_MNT}/data --keyfile-size 32
	SCRIPT_RC=$?

	wipe_file ${TMPFS_MNT}/data
}

function usage
{
	echo "usage ${0##*/}: [-c|-o|-m|-r] [options]"
	echo "options:"
	echo -e "  -c                create a new key, store it in TPM NVRAM and add it to a"
	echo -e	"                     LUKS keyslot"
	echo -e "  -o <name>         get a secret from TPM NVRAM and use it to open a LUKS device"
	echo -e "  -m                migrate NVRAM data to a new NVRAM area"
	echo -e "  -r                retrieve NVRAM data and write to a tmpfs file"
#	echo -e "  -q                re-use the same password for each NVRAM area (only prompt"
#	echo -e	"                     once)"
	echo -e "  -s <keyslot>      use the specified LUKS key slot (view free slots with "
	echo -e	"                     'cryptsetup luksDump <device>')"
	echo -e "  -i <index>        use the specified TPM NVRAM index for the new area (view "
	echo -e	"                     indexes with tpm_nvinfo)"
	echo -e "  -d <device>       use the specified LUKS device (print with "
	echo -e	"                     'blkid -t TYPE=crypto_LUKS')"
	echo -e	"  -p <nvpermsfile>  use the specified NV permissions file for the new area"
}

#
# main()
#
if [ $(id -u) -ne 0 ];then
	echo "You'll need to be root for this (uses tmpfs mount)"
	exit -1
fi

SAME_AUTH=0
NVINDEX=
ACTION="x"

while getopts "cp:ro:sd:qm" opt; do
	case $opt in
	c)
		ACTION="create"
		;;
	o)
		ACTION="open"
		NAME=${OPTARG}
		;;
	m)
		ACTION="migrate"
		;;
	r)
		ACTION="retrieve"
		;;
	s)
		KEY_SLOT=${OPTARG}
		;;
	i)
		NVINDEX=${OPTARG}
		;;
	d)
		DEVICE=${OPTARG}
		;;
	p)
		PERMSFILE=${OPTARG}
		;;
	q)
		SAME_AUTH=1
		;;
	*)
		usage
		exit -1
		;;
	esac
done

# always check that TPM is enabled and owned
tpm_enabled
tpm_owned

if [ "${ACTION}" == "create" ]; then
	if [ -n "${PERMSFILE}" -a ! -e "${PERMSFILE}" ]; then
		echo "Error: couldn't open ${PERMSFILE} for reading."
		exit -1
	fi

	test -n "$DEVICE" && \
		DEVICE=$(find_luks_device)

	get_owner_password

	if [ ! -n "${NVINDEX}" ]; then
		NVINDEX=$(find_free_nv_index)
	fi

	echo "Using NV index ${NVINDEX} for device ${DEVICE}"

	if [ ! -n "NVPASS1" -o ${SAME_AUTH} -eq 0 ]; then
		read -s -p "Enter a TPM NV area password for ${DEVICE}: " NVPASS1
		echo
		read -s -p "Re-enter a TPM NV area password for ${DEVICE}: " NVPASS2
		echo

		if [ "${NVPASS1}" != "${NVPASS2}" ]; then
			echo "NV passwords don't match!"
			exit -1
		fi
	fi

	#nv_write ${NVINDEX} ${DEVICE} ${OWNERPASS} ${NVPASS1} ${PERMSFILE}
	TMPFS_KEYFILE=$(keyfile_generate)

	test -e $TMPFS_KEYFILE && \
		nv_define_and_write ${OWNERPASS} ${NVPASS1} ${TMPFS_KEYFILE} \
			${NVINDEX} ${PERMSFILE}

	# copy out all but the version byte
	dd if=${TMPFS_KEYFILE} of=${TMPFS_KEYFILE}.data bs=1c skip=1 count=32 >/dev/null 2>&1

	wipe_file ${TMPFS_KEYFILE}

	luks_add_key ${TMPFS_KEYFILE}.data ${DEVICE}

	wipe_file ${TMPFS_KEYFILE}.data
elif [ "${ACTION}" == "open" ]; then
	get_nv_password

	test -n "$DEVICE" && \
		DEVICE=$(find_luks_device)

	NVFILE=$(nv_get ${NVPASS})
	luks_open ${NVFILE} ${DEVICE} ${NAME}

	wipe_file ${NVFILE}
elif [ "${ACTION}" == "migrate" ]; then
	get_owner_password
	get_nv_password

	if [ ! -n "${NVINDEX}" ]; then
		NVINDEX=$(find_free_nv_index)
	fi

	NVFILE=$(nv_get ${NVPASS})
	nv_define_and_write ${OWNERPASS} ${NVPASS} ${NVFILE} ${NVINDEX} ${PERMSFILE}
elif [ "${ACTION}" == "retrieve" ]; then
	get_nv_password

	echo $(nv_get ${NVPASS})
else
	usage
	exit 1
fi

exit $SCRIPT_RC
