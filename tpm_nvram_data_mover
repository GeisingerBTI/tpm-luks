#!/bin/bash
#
# store and retrieve data from a TPM's NVRAM
#
# usage: $0 create [OWNERPASS] [NVPASS]
#        $0 retrieve [NVPASS]
#
# By default 32 bytes of data are read from /dev/urandom and written to an
# empty NVRAM index with a 1 byte header (version number)
#
# This version of the script supports a version 0 header only:
# [0][ 32 bytes data ]
#
# package reqs: tpm-tools, trousers
#
# Author: Kent Yoder <yoder1@us.ibm.com>
#
NV_INDEX_LIMIT=64
PCRS=8

#set -x

function find_free_nv_index
{
	NV_INDEXES=$(tpm_nvinfo -n | awk '$1 ~ /0x/ {print $2}'|sed -e 's/(\(.*\))/\1/')

	for i in ${NV_INDEXES}; do
		if [ $i -gt ${NV_INDEX_LIMIT} ]; then
			continue
		fi

		NV_INDEX=$i
	done

	echo "$(( $NV_INDEX + 1 ))"
}

#
# nv_write <NV index> <tpm owner password> <new password for nv index>
#
function nv_write
{
	NVINDEX=${1}
	OWNERPASS=${2}
	NVPASS=${3}

	TMPFS_MNT=$(mktemp -d /tmp/${0##*/}-XXXXXX)
	mount -t tmpfs -o size=16K tmpfs ${TMPFS_MNT}
	if [ $? -ne 0 ]; then
		echo "Unable to mount tmpfs area"
		exit -1
	fi

	# write the version bytes (version 0)
	dd if=/dev/zero of=${TMPFS_MNT}/key bs=1c count=1 >/dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo "dd failed"
		umount ${TMPFS_MNT}
		exit -1
	fi

	# write a 32 byte symmetric key
	dd if=/dev/urandom of=${TMPFS_MNT}/key bs=1c seek=1 count=32 >/dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo "dd failed"
		umount ${TMPFS_MNT}
		exit -1
	fi

	# checksum the data
	#md5sum ${TMPFS_MNT}/key

	tpm_nvdefine -i ${NVINDEX} -s 33 -p 'AUTHREAD|AUTHWRITE' -o ${OWNERPASS} \
		-a ${NVPASS} -r ${PCRS} >/dev/null 2>&1
	if [ $? -ne 0 ]; then
		umount ${TMPFS_MNT}
		exit -1
	fi

	tpm_nvwrite -i ${NVINDEX} -s 33 -f ${TMPFS_MNT}/key --password=${NVPASS} >/dev/null 2>&1

	# debug
	#echo "DBG: data written:"
	#od -t x1 ${TMPFS_MNT}/key

	dd if=/dev/zero of=${TMPFS_MNT}/key bs=33 count=1 >/dev/null 2>&1
	umount ${TMPFS_MNT}
}

#
# nv_retrieve <nv area password>
#
function nv_retrieve
{
	NVPASS=${1}
	NVINDEX=1

	TMPFS_MNT=$(mktemp -d /tmp/${0##*/}-XXXXXX)
	mount -t tmpfs -o size=16K tmpfs ${TMPFS_MNT}
	if [ $? -ne 0 ]; then
		echo "Unable to mount tmpfs area"
		exit -1
	fi

	while [ ${NVINDEX} -lt ${NV_INDEX_LIMIT} ]; do
		tpm_nvread -i ${NVINDEX} -s 33 --password=${NVPASS} \
			-f ${TMPFS_MNT}/data.tmp >/dev/null 2>&1
		RC=$?
		if [ ${RC} -ne 0 ]; then
			NVINDEX=$(( $NVINDEX + 1 ))
			echo "rc for tpm_nvread is ${RC}. Trying NV index ${NVINDEX}"
			continue
		fi

		# version check
		od -A n -N 1 -t x1 ${TMPFS_MNT}/data.tmp|grep -q 00
		RC=$?
		if [ ${RC} -ne 0 ]; then
			echo "ignoring NV index ${NVINDEX} (wrong version)"
			NVINDEX=$(( $NVINDEX + 1 ))
			continue
		fi

		break
	done

	# debug
	#echo "DBG: data.tmp:"
	#od -t x1 ${TMPFS_MNT}/data.tmp

	# copy out all but the version byte
	dd if=${TMPFS_MNT}/data.tmp of=${TMPFS_MNT}/data bs=1c skip=1 count=32 >/dev/null 2>&1
	rm -f ${TMPFS_MNT}/data.tmp

	# debug
	#echo "DBG: data:"
	#od -t x1 ${TMPFS_MNT}/data

	echo "${TMPFS_MNT}/data"
}

function usage
{
	echo "usage ${0##*/}: [options]"
	echo "options:"
	echo -e "\tcreate [OWNERPASS] [NVPASS]\tcreate a new nvram area"
	echo -e "\tretrieve [NVPASS]\t\tretrieve a secret from nvram and return it in a tmpfs file"
}

#
# main()
#
if [ $(id -u) -ne 0 ];then
	echo "You'll need to be root for this (uses tmpfs mount)"
	exit -1
fi

OWNERPASS=
NVPASS=
ACTION=${1:??}
shift

if [ ${ACTION} == "create" ]; then
	OWNERPASS=${1}
	shift
	NVPASS=${1}

	NV_INDEX=$(find_free_nv_index)

	echo "Using NV index ${NV_INDEX}"

	if [ ! -n "${OWNERPASS}" ]; then
		read -s -p "Enter your TPM owner password: " OWNERPASS
		echo
	fi

	if [ ! -n "${NVPASS}" ]; then
		read -s -p "Enter your NV password: " NVPASS1
		echo
		read -s -p "Re-enter your NV password: " NVPASS2
		echo

		if [ "${NVPASS1}" != "${NVPASS2}" ]; then
			echo "NV passwords don't match!"
			exit -1
		fi

		NVPASS=${NVPASS1}
	fi

	nv_write ${NV_INDEX} ${OWNERPASS} ${NVPASS}
elif [ ${ACTION} == "retrieve" ]; then
	NVPASS=${1}

	if [ ! -n "${NVPASS}" ]; then
		read -s -p "Enter your NV password: " NVPASS
		echo
	fi

	nv_retrieve ${NVPASS}
else
	usage
	exit 1
fi

exit 0


